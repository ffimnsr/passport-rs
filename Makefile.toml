[tasks.install-systemfd]
install_crate = "systemfd"

[tasks.install-cargo-watch]
install_crate = "cargo-watch"

[tasks.install-githooks]
command = "git"
args = ["config", "--local", "core.hooksPath", ".githooks/"]

[tasks.nt-serve]
command = "systemfd"
args = [
  "--no-pid",
  "-s",
  "http::5000",
  "--",
  "cargo",
  "watch",
  "-w",
  "src",
  "-x",
  "run",
]
dependencies = ["install-systemfd", "install-cargo-watch"]

[tasks.trigger-serve]
command = "systemfd"
args = [
  "--no-pid",
  "-s",
  "http::6050",
  "--",
  "cargo",
  "watch",
  "--no-vcs-ignores",
  "--watch-when-idle",
  "-w",
  ".trigger",
  "-x",
  "run",
]
dependencies = ["install-systemfd", "install-cargo-watch"]

[tasks.trigger-touch]
command = "cargo"
args = [
  "watch",
  "--no-vcs-ignores",
  "--watch-when-idle",
  "-w",
  "src",
  "-x",
  "check",
  "--",
  "touch",
  ".trigger",
]
dependencies = ["install-cargo-watch"]

[tasks.serve]
run_task = { name = ["trigger-touch", "trigger-serve"], parallel = true }

[tasks.migrate]
install_crate = "midas"
command = "midas"
args = ["up"]

[tasks.test-live]
install_crate = "hurl"
command = "hurl"
args = ["--tests", "tests/*.hurl"]

[tasks.run-postgres]
script = '''
#!/usr/bin/env bash

set -euo pipefail

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

$packager run -it --rm --name postgres -p 5432:5432 \
  -e POSTGRES_PASSWORD=mysecretpassword \
  -e POSTGRES_DB=startup \
  -d docker.io/library/postgres:17-alpine
'''

[tasks.run-postgres-persist]
script = '''
#!/usr/bin/env bash

set -euo pipefail

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

$packager run -it --rm --name postgres -p 5432:5432 \
  -v postgres-data:/var/lib/postgresql/data:z \
  -e POSTGRES_PASSWORD=mysecretpassword \
  -e POSTGRES_DB=startup \
  -d docker.io/library/postgres:17-alpine
'''

[tasks.psql]
script = '''
#!/usr/bin/env bash

set -euo pipefail

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

$packager exec -it postgres psql -U postgres -d startup --single-line
'''

[tasks.psql-ls-tables]
script = '''
#!/usr/bin/env bash

set -euo pipefail

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

$packager exec -it postgres psql -U postgres -d startup -c "\dt+"
'''

[tasks.create-package]
script = '''
#!/usr/bin/env bash

set -e

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

latest_version=${CARGO_MAKE_PROJECT_VERSION}
name=${CARGO_MAKE_PROJECT_NAME}
$packager build \
  --label org.opencontainers.image.created=$(date +%Y-%m-%dT%H:%M:%S%z) \
  --label org.opencontainers.image.authors=gh:@ffimnsr \
  --label org.opencontainers.image.description="$name $latest_version" \
  --label org.opencontainers.image.revision=$(git rev-parse HEAD) \
  --label org.opencontainers.image.source=$(git remote get-url origin) \
  --label org.opencontainers.image.title=$name \
  --label org.opencontainers.image.url=https://github.com/ffimnsr/playground \
  --label org.opencontainers.image.version=$latest_version\
  -f Containerfile \
  -t docker.io/ifn4/$name:$latest_version \
  -t docker.io/ifn4/$name:latest .
'''

[tasks.create-package-distroless]
script = '''
#!/usr/bin/env bash

set -e

packager=docker
if ! command -v docker &>/dev/null; then
  packager=podman
fi

latest_version=${CARGO_MAKE_PROJECT_VERSION}
name=${CARGO_MAKE_PROJECT_NAME}
$packager build \
  --sbom=true \
  --provenance=true \
  --label org.opencontainers.image.created=$(date +%Y-%m-%dT%H:%M:%S%z) \
  --label org.opencontainers.image.authors=gh:@ffimnsr \
  --label org.opencontainers.image.description="$name $latest_version" \
  --label org.opencontainers.image.revision=$(git rev-parse HEAD) \
  --label org.opencontainers.image.source=$(git remote get-url origin) \
  --label org.opencontainers.image.title=$name \
  --label org.opencontainers.image.url=https://github.com/ffimnsr/playground \
  --label org.opencontainers.image.version=$latest_version\
  -f Containerfile.distroless \
  -t docker.io/ifn4/$name-distroless:$latest_version \
  -t docker.io/ifn4/$name-distroless:latest .
'''
